//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/CharacterActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterActions"",
    ""maps"": [
        {
            ""name"": ""MainGameActions"",
            ""id"": ""e5b4ff12-45d4-4266-8beb-2cdf5307b66a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fcc5364d-c887-47e8-a497-94ac6e480d02"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ff0f8bda-7967-4680-bcf4-ff956c88355a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookUp_X"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c8b52ce6-2114-44db-8331-397d44b6f698"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookUp_Y"",
                    ""type"": ""PassThrough"",
                    ""id"": ""06114508-9b47-49a2-abce-fd37045ab265"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Bindings"",
                    ""id"": ""f75da876-150f-40c2-adfd-5c90d1aa6076"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c5236d50-cb40-4bb1-99fb-110030b2541d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2d93b78f-3494-4e52-b95c-ceda87c4705e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e7162bb-98a4-490b-8f87-a1d9f6baee08"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c272484-ca55-4ee4-a1d5-ed37ad1ff78c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0259b9c-ebce-4c43-ba85-5bebaaa635cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd416fd4-472e-4c4a-bbed-c2733e8096d3"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp_X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03386e7a-1ff6-4f54-93da-6d8872c18a7d"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUp_Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainGameActions
        m_MainGameActions = asset.FindActionMap("MainGameActions", throwIfNotFound: true);
        m_MainGameActions_Movement = m_MainGameActions.FindAction("Movement", throwIfNotFound: true);
        m_MainGameActions_Jump = m_MainGameActions.FindAction("Jump", throwIfNotFound: true);
        m_MainGameActions_LookUp_X = m_MainGameActions.FindAction("LookUp_X", throwIfNotFound: true);
        m_MainGameActions_LookUp_Y = m_MainGameActions.FindAction("LookUp_Y", throwIfNotFound: true);
    }

    ~@CharacterActions()
    {
        UnityEngine.Debug.Assert(!m_MainGameActions.enabled, "This will cause a leak and performance issues, CharacterActions.MainGameActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainGameActions
    private readonly InputActionMap m_MainGameActions;
    private List<IMainGameActionsActions> m_MainGameActionsActionsCallbackInterfaces = new List<IMainGameActionsActions>();
    private readonly InputAction m_MainGameActions_Movement;
    private readonly InputAction m_MainGameActions_Jump;
    private readonly InputAction m_MainGameActions_LookUp_X;
    private readonly InputAction m_MainGameActions_LookUp_Y;
    public struct MainGameActionsActions
    {
        private @CharacterActions m_Wrapper;
        public MainGameActionsActions(@CharacterActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MainGameActions_Movement;
        public InputAction @Jump => m_Wrapper.m_MainGameActions_Jump;
        public InputAction @LookUp_X => m_Wrapper.m_MainGameActions_LookUp_X;
        public InputAction @LookUp_Y => m_Wrapper.m_MainGameActions_LookUp_Y;
        public InputActionMap Get() { return m_Wrapper.m_MainGameActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGameActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMainGameActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainGameActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainGameActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LookUp_X.started += instance.OnLookUp_X;
            @LookUp_X.performed += instance.OnLookUp_X;
            @LookUp_X.canceled += instance.OnLookUp_X;
            @LookUp_Y.started += instance.OnLookUp_Y;
            @LookUp_Y.performed += instance.OnLookUp_Y;
            @LookUp_Y.canceled += instance.OnLookUp_Y;
        }

        private void UnregisterCallbacks(IMainGameActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LookUp_X.started -= instance.OnLookUp_X;
            @LookUp_X.performed -= instance.OnLookUp_X;
            @LookUp_X.canceled -= instance.OnLookUp_X;
            @LookUp_Y.started -= instance.OnLookUp_Y;
            @LookUp_Y.performed -= instance.OnLookUp_Y;
            @LookUp_Y.canceled -= instance.OnLookUp_Y;
        }

        public void RemoveCallbacks(IMainGameActionsActions instance)
        {
            if (m_Wrapper.m_MainGameActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainGameActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainGameActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainGameActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainGameActionsActions @MainGameActions => new MainGameActionsActions(this);
    public interface IMainGameActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLookUp_X(InputAction.CallbackContext context);
        void OnLookUp_Y(InputAction.CallbackContext context);
    }
}
